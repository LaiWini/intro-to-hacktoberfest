Convert Sorted LinkedList to Binary Search Tree
..................................................

Problem
--------

Given the head of a singly linked list where elements are sorted in ascending order, 
convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the 
depth of the two subtrees of every node never differ by more than 1.

Examples
---------

Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.

Input: head = [1,3]
Output: [3,1]

Solution
---------

class Solution {
public:
    ListNode* middle(ListNode* head){
       ListNode* slow=head,*fast=head,*prev=head;
       while(fast && fast->next){
           prev=slow;
           slow=slow->next;
           fast=fast->next->next;
       }
        if(prev!=NULL)
            prev->next= NULL;
        return slow;
     }
    
    TreeNode* sortedListToBST(ListNode* head) {
        if(head==NULL)
            return NULL;
        ListNode *mid= middle(head);
        TreeNode *root= new TreeNode(mid->val);
        if(head==mid)
            return root;
        root->left= sortedListToBST(head);
        root->right= sortedListToBST(mid->next);
        return root;
    }
};

 
 

Convert Sorted Array to Binary Search Tree
...............................................

Problem
--------

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

Examples
---------

Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are both a height-balanced BSTs.

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted

Solution
---------

class Solution {
public:
    TreeNode* createTree(vector<int>& nums, int l, int r){
        if(l>r)
            return NULL;
        int mid= (l+r)>>1;
        TreeNode* root= new TreeNode(nums[mid]);
        root->left= createTree(nums,l,mid-1);
        root->right= createTree(nums,mid+1,r);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
       int n= nums.size();
        if(n==0)
            return NULL;
        int l=0,r=n-1;
        return createTree(nums,l,r);
    }
};
