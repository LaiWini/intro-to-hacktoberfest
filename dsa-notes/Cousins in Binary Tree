Problem
...................

Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, 
return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.
Two nodes of a binary tree are cousins if they have the same depth with different parents.
Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.




Examples
.....................

Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Input: root = [1,2,3,4], x = 4, y = 3
Output: false




Code
......................

1. Using Level Order Traversal with Explanation
..................................................

bool isCousins(TreeNode* root, int x, int y) {
        
        queue<TreeNode*> pendingNodes; //queue to do level order traversal
        pendingNodes.push(root);
        
        while(!pendingNodes.empty()){
            int s = pendingNodes.size(); // It helps to insert nodes at particular level and basically it helps to traverse a particualr level at a time (you'll understand its use ðŸ¤ž)
            int cnt = 0; // This will  tell us about the ans (true/false)
            while(s--){
                TreeNode* front = pendingNodes.front(); // I took out the first element
                pendingNodes.pop(); // Poped it out
                
                if(front->val==x || front->val==y){ //Checked if its value is equal to x or y
                    cnt++; // If yes then cnt increases by 1 for the first time but if on the same level we encounter another node with value of x or y then cnt will become 2 and it means we found the siblings. If you are thinking of the case when main_roots right and left values will be x and y, it will be handled beforehand only by the below if
                }
                
                if(front->left && (front->left->val == x || front->left->val == y) && front->right && (front->right->val == x || front->right->val == y)){
                    return false;
                } 
                // for the same node we simultanously checked if its children are x and y or not
                // if yes we return false because then they will be siblings
                
                
                // we pushed the current nodes children
                if(front->left){
                    pendingNodes.push(front->left);
                }
                if(front->right){
                    pendingNodes.push(front->right);
                }
            }
            if(cnt == 2){ 
                // If cnt is equal to 2 it would mean we found x and y on the same level
                return true;
            }
            else if(cnt == 1){
                // If cnt is equal to 1 it would mean we found either x and y on a particular level
                // it means the other is ont a different level. Hence we returned false
                return false;
            }
            
        }
        return false; // This is put for the sake of leetcode
    }


2. Using DFS Algorithm
...........................

class Solution {
public:
    int parentx=-1,parenty=-1;
    int height(TreeNode* root,int h,int value,int &parent)
    {
        int x=0,y=0;
        if(root==NULL)
        return 0;
        if(root->val==value)
        return h;
        parent=root->val;
        if(root->left)
        x=height(root->left,h+1,value,parent);
        if(x!=0)
        return x;
        parent=root->val;
        if(root->right)
        y=height(root->right,h+1,value,parent);
        return y;
    }
    bool isCousins(TreeNode* root, int x, int y) {
        if(root->val==x||root->val==y)
        return false;
        int parentx=-1,parenty=-1;
        int heightx=height(root,0,x,parentx);
        int heighty=height(root,0,y,parenty);
        return (heightx==heighty&&parentx!=parenty);
    }
};

