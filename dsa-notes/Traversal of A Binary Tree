LevelOrder Traversal of A Binary Tree
........................................

Problem
--------

Given the root of a binary tree, return the level order traversal of its nodes' values. 
(i.e., from left to right, level by level).

Examples
--------

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Input: root = []
Output: []

Input: root = [1]
Output: [[1]]

Solution
--------

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root==NULL)
            return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int size= q.size();
             vector<int> ans;
            for(int i=1;i<=size;i++){
              TreeNode* curr= q.front();
              ans.push_back(curr->val);
              if(curr->left!=NULL)  
                q.push(curr->left);
              if(curr->right!=NULL)  
                q.push(curr->right);
                
              q.pop(); 
             }
           
            res.push_back(ans);
        }
      return res;  
    }



ZigZag Order Traversal of A Binary Tree
...........................................

Problem
--------

Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
(i.e., from left to right, then right to left for the next level and alternate between).

Examples
--------

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Input: root = []
Output: []

Input: root = [1]
Output: [[1]]


Solution
---------

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root==NULL)
            return res;
        queue<TreeNode*> q;
        q.push(root);
        int i=1;
        while(!q.empty()){
            int len= q.size();
            vector<int> ans;
            i++;
            for(int i=0;i<len;i++){
                TreeNode* curr= q.front();
                ans.push_back(curr->val);
                if(curr->left)
                    q.push(curr->left);
                if(curr->right)
                    q.push(curr->right);
                 q.pop();
            }
            if(i%2)
                reverse(ans.begin(),ans.end());
            res.push_back(ans);
        }
        return res;
    }
};




Pre-Order Traversal of a Binary Tree
........................................

Problem
--------

Given the root of a binary tree, return the preorder traversal of its nodes' values.

Examples
---------

Input: root = [1,null,2,3]
Output: [1,2,3]

Input: root = [1]
Output: [1]

Input: root = []
Output: []

Solution
---------

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root==NULL)
            return res;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            TreeNode* curr= s.top();
            res.push_back(curr->val);
            s.pop();
            if(curr->right)
             s.push(curr->right);
            if(curr->left)
             s.push(curr->left);
        }
        return res;
    }
    


PostOrder Traversal of A Binary Tree
.......................................

Problem
--------

Given the root of a binary tree, return the postorder traversal of its nodes' values.

Examples
---------

Input: root = [1,null,2,3]
Output: [3,2,1]

Input: root = [1,2]
Output: [2,1]

Input: root = []
Output: []

Input: root = [1,null,2]
Output: [2,1]


Solution
---------

class Solution {
public:
   
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root==NULL)
            return res;
        stack<TreeNode*> s1,s2;
        s1.push(root);
        while(!s1.empty()){
            TreeNode* curr= s1.top();
            s2.push(curr);
            s1.pop();
            if(curr->left)
                s1.push(curr->left);
            if(curr->right)
                s1.push(curr->right);
        }
        while(!s2.empty()){
            TreeNode* p= s2.top();
            res.push_back(p->val);
            s2.pop();
        }
        return res;
    }



Inorder Traversal of A Binary Tree
.....................................

Problem
--------

Given the root of a binary tree, return the inorder traversal of its nodes' values.

Examples
---------

Input: root = [1,null,2,3]
Output: [1,3,2]

Input: root = [1]
Output: [1]

Input: root = [1,2]
Output: [2,1]

Solution
---------

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        if(root==NULL)
            return res;
        stack<TreeNode*> s;
        TreeNode *curr=root;
        while(!s.empty() || curr!=NULL){
            while(curr!=NULL){
                s.push(curr);
                curr=curr->left;
            }
            curr=s.top();
            res.push_back(curr->val);
            s.pop();
            curr=curr->right;
        }
        return res;
    }
    
    


    
